# Generated by Django 5.2.4 on 2025-08-14 13:02

import apps.core.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('authentication', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Chauffeur',
            fields=[
                ('agent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='chauffeur_profile', serialize=False, to='authentication.agent', verbose_name='Agent')),
                ('numero_permis', models.CharField(max_length=50, unique=True, verbose_name='Numéro de permis')),
                ('date_obtention_permis', models.DateField(verbose_name="Date d'obtention du permis")),
                ('type_permis', models.CharField(blank=True, choices=[('A', 'A'), ('A1', 'A1'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E')], max_length=10, null=True, validators=[apps.core.models.validate_non_empty_trimmed], verbose_name='Type de permis')),
                ('date_expiration_permis', models.DateField(blank=True, null=True, verbose_name="Date d'expiration du permis")),
                ('nombre_points', models.IntegerField(default=12, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(12)], verbose_name='Nombre de points')),
            ],
            options={
                'verbose_name': 'Chauffeur',
                'verbose_name_plural': 'Chauffeurs',
                'db_table': 'core_chauffeur',
            },
        ),
        migrations.CreateModel(
            name='ChefParc',
            fields=[
                ('agent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='chefparc_profile', serialize=False, to='authentication.agent', verbose_name='Agent')),
                ('date_nomination', models.DateField(default=django.utils.timezone.now, verbose_name='Date de nomination')),
                ('niveau_autorite', models.CharField(blank=True, choices=[('Local', 'Local'), ('Multi-sites', 'Multi-sites'), ('Régional', 'Régional')], max_length=50, null=True, verbose_name="Niveau d'autorité")),
                ('formation_securite', models.BooleanField(default=False, verbose_name='Formation sécurité')),
            ],
            options={
                'verbose_name': 'Chef de Parc',
                'verbose_name_plural': 'Chefs de Parc',
                'db_table': 'core_chefparc',
            },
        ),
        migrations.CreateModel(
            name='Deplacement',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('destination', models.CharField(max_length=100, validators=[apps.core.models.validate_non_empty_trimmed], verbose_name='Destination')),
                ('dateDepart', models.DateTimeField(verbose_name='Date de départ')),
                ('dateArrivee', models.DateTimeField(blank=True, null=True, verbose_name="Date d'arrivée")),
                ('isMission', models.BooleanField(default=False, verbose_name='Est une mission')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('statut', models.CharField(choices=[('Planifié', 'Planifié'), ('En cours', 'En cours'), ('Terminé', 'Terminé'), ('Annulé', 'Annulé')], default='Planifié', max_length=20, verbose_name='Statut')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_modification', models.DateTimeField(auto_now=True, verbose_name='Date de dernière modification')),
            ],
            options={
                'verbose_name': 'Déplacement',
                'verbose_name_plural': 'Déplacements',
                'db_table': 'core_deplacement',
                'ordering': ['-dateDepart'],
            },
        ),
        migrations.CreateModel(
            name='Entite',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100, unique=True, validators=[apps.core.models.validate_non_empty_trimmed], verbose_name="Nom de l'entité")),
                ('type', models.CharField(choices=[('Cabinet', 'Cabinet'), ('Secrétariat Général', 'Secrétariat Général'), ('Direction Générale', 'Direction Générale'), ('Direction Centrale', 'Direction Centrale'), ('Direction Régionale', 'Direction Régionale'), ('Direction Provinciale', 'Direction Provinciale')], max_length=50, verbose_name="Type d'entité")),
            ],
            options={
                'verbose_name': 'Entité',
                'verbose_name_plural': 'Entités',
                'db_table': 'core_entite',
                'ordering': ['type', 'nom'],
            },
        ),
        migrations.CreateModel(
            name='Localite',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100, validators=[apps.core.models.validate_non_empty_trimmed], verbose_name='Nom de la localité')),
            ],
            options={
                'verbose_name': 'Localité',
                'verbose_name_plural': 'Localités',
                'db_table': 'core_localite',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100, validators=[apps.core.models.validate_non_empty_trimmed], verbose_name='Nom de la province')),
            ],
            options={
                'verbose_name': 'Province',
                'verbose_name_plural': 'Provinces',
                'db_table': 'core_province',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100, unique=True, validators=[apps.core.models.validate_non_empty_trimmed], verbose_name='Nom de la région')),
            ],
            options={
                'verbose_name': 'Région',
                'verbose_name_plural': 'Régions',
                'db_table': 'core_region',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Responsable',
            fields=[
                ('agent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='responsable_profile', serialize=False, to='authentication.agent', verbose_name='Agent')),
                ('niveau_responsabilite', models.CharField(blank=True, choices=[('Local', 'Local'), ('Provincial', 'Provincial'), ('Régional', 'Régional'), ('National', 'National')], max_length=50, null=True, verbose_name='Niveau de responsabilité')),
                ('date_nomination', models.DateField(default=django.utils.timezone.now, verbose_name='Date de nomination')),
                ('budget_autorise', models.DecimalField(decimal_places=2, default=0.0, max_digits=12, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Budget autorisé')),
            ],
            options={
                'verbose_name': 'Responsable',
                'verbose_name_plural': 'Responsables',
                'db_table': 'core_responsable',
            },
        ),
        migrations.CreateModel(
            name='TypeCout',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100, unique=True, validators=[apps.core.models.validate_non_empty_trimmed], verbose_name='Nom du type de coût')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Description')),
                ('categorie', models.CharField(blank=True, choices=[('Obligatoire', 'Obligatoire'), ('Préventif', 'Préventif'), ('Curatif', 'Curatif'), ('Administratif', 'Administratif'), ('Carburant', 'Carburant')], max_length=50, null=True, verbose_name='Catégorie')),
                ('est_recurrent', models.BooleanField(default=False, verbose_name='Est récurrent')),
                ('date_creation', models.DateField(default=django.utils.timezone.now, verbose_name='Date de création')),
                ('est_actif', models.BooleanField(default=True, verbose_name='Est actif')),
            ],
            options={
                'verbose_name': 'Type de Coût',
                'verbose_name_plural': 'Types de Coûts',
                'db_table': 'core_type_cout',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Vehicule',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('immatriculation', models.CharField(max_length=50, unique=True, validators=[apps.core.models.validate_non_empty_trimmed], verbose_name='Immatriculation')),
                ('marque', models.CharField(blank=True, max_length=50, null=True, verbose_name='Marque')),
                ('modele', models.CharField(blank=True, max_length=50, null=True, verbose_name='Modèle')),
                ('type', models.CharField(blank=True, choices=[('Berline', 'Berline'), ('Break', 'Break'), ('SUV', 'SUV'), ('Utilitaire', 'Utilitaire'), ('Camion', 'Camion'), ('Bus', 'Bus'), ('Minibus', 'Minibus'), ('Moto', 'Moto')], max_length=50, null=True, verbose_name='Type de véhicule')),
                ('isDisponible', models.BooleanField(default=True, verbose_name='Estdisponible')),
                ('dateAcquisition', models.DateField(blank=True, null=True, verbose_name="Date d'acquisition")),
                ('kilometrage', models.IntegerField(default=0.0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Kilométrage')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_modification', models.DateTimeField(auto_now=True, verbose_name='Date de dernière modification')),
                ('est_actif', models.BooleanField(default=True, verbose_name='Est actif')),
            ],
            options={
                'verbose_name': 'Véhicule',
                'verbose_name_plural': 'Véhicules',
                'db_table': 'core_vehicule',
                'ordering': ['immatriculation'],
            },
        ),
        migrations.CreateModel(
            name='Parc',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('localisation', models.CharField(blank=True, max_length=100, null=True, verbose_name='Localisation')),
                ('niveau', models.CharField(blank=True, choices=[('Principal', 'Principal'), ('Secondaire', 'Secondaire'), ('Spécialisé', 'Spécialisé'), ('Temporaire', 'Temporaire')], max_length=50, null=True, verbose_name='Niveau du parc')),
                ('date_creation', models.DateField(default=django.utils.timezone.now, verbose_name='Date de création')),
                ('est_actif', models.BooleanField(default=True, verbose_name='Est actif')),
                ('localite', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='parcs', to='core.localite', verbose_name="Localité d'implantation")),
            ],
            options={
                'verbose_name': 'Parc',
                'verbose_name_plural': 'Parcs',
                'db_table': 'core_parc',
                'ordering': ['localisation'],
            },
        ),
        migrations.AddField(
            model_name='localite',
            name='province',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='localites', to='core.province', verbose_name='Province parente'),
        ),
        migrations.AddField(
            model_name='province',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='provinces', to='core.region', verbose_name='Région parente'),
        ),
        migrations.CreateModel(
            name='UtilisationVehicule',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('carburant', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Carburant')),
                ('peages', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Péages')),
                ('kilometres_parcourus', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Kilomètres parcourus')),
                ('heure_debut', models.DateTimeField(blank=True, null=True, verbose_name='Heure de début')),
                ('heure_fin', models.DateTimeField(blank=True, null=True, verbose_name='Heure de fin')),
                ('deplacement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='utilisations_vehicule', to='core.deplacement', verbose_name='Déplacement')),
                ('vehicule', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='utilisations', to='core.vehicule', verbose_name='Véhicule')),
            ],
            options={
                'verbose_name': 'Utilisation Véhicule',
                'verbose_name_plural': 'Utilisations Véhicules',
                'db_table': 'core_utilisation_vehicule',
                'ordering': ['deplacement__dateDepart'],
            },
        ),
        migrations.CreateModel(
            name='CoutVehicule',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('montant', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Montant')),
                ('date_cout', models.DateField(verbose_name='Date du coût')),
                ('annee', models.IntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2026)], verbose_name='Année')),
                ('commentaire', models.CharField(blank=True, max_length=255, null=True, verbose_name='Commentaire')),
                ('date_saisie', models.DateTimeField(auto_now_add=True, verbose_name='Date desaisie')),
                ('saisi_par', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='couts_saisis', to='authentication.agent', verbose_name='Saisi par')),
                ('type_cout', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='couts_associes', to='core.typecout', verbose_name='Type de coût')),
                ('vehicule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='couts', to='core.vehicule', verbose_name='Véhicule concerné')),
            ],
            options={
                'verbose_name': 'Coût Véhicule',
                'verbose_name_plural': 'Coûts Véhicules',
                'db_table': 'core_cout_vehicule',
                'ordering': ['-date_cout'],
            },
        ),
        migrations.CreateModel(
            name='DeplacementAgent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_deplacement', models.CharField(choices=[('Passager', 'Passager'), ('Accompagnateur', 'Accompagnateur'), ('Responsable Mission', 'Responsable Mission'), ('Organisateur', 'Organisateur')], max_length=50, verbose_name='Rôle dans le déplacement')),
                ('date_inscription', models.DateTimeField(auto_now_add=True, verbose_name="Date d'inscription")),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authentication.agent', verbose_name='Agent')),
                ('deplacement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.deplacement', verbose_name='Déplacement')),
            ],
            options={
                'verbose_name': 'Participant au Déplacement',
                'verbose_name_plural': 'Participants aux Déplacements',
                'db_table': 'core_deplacement_agent',
                'unique_together': {('deplacement', 'agent')},
            },
        ),
        migrations.CreateModel(
            name='DeplacementChauffeur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heures_conduite', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(24.0)], verbose_name='Heures de conduite')),
                ('est_principal', models.BooleanField(default=False, verbose_name='Estprincipal')),
                ('chauffeur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.chauffeur', verbose_name='Chauffeur')),
                ('deplacement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.deplacement', verbose_name='Déplacement')),
            ],
            options={
                'verbose_name': 'Chauffeur de Déplacement',
                'verbose_name_plural': 'Chauffeurs de Déplacements',
                'db_table': 'core_deplacement_chauffeur',
                'unique_together': {('deplacement', 'chauffeur')},
            },
        ),
        migrations.CreateModel(
            name='EntiteParc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_rattachement', models.DateField(default=django.utils.timezone.now, verbose_name='Date de rattachement')),
                ('date_fin', models.DateField(blank=True, null=True, verbose_name='Date de fin')),
                ('pourcentage_usage', models.DecimalField(decimal_places=2, default=100.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name="Pourcentage d'usage")),
                ('entite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entite', verbose_name='Entité')),
                ('parc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.parc', verbose_name='Parc')),
            ],
            options={
                'verbose_name': 'Rattachement Entité-Parc',
                'verbose_name_plural': 'Rattachements Entités-Parcs',
                'db_table': 'core_entite_parc',
                'unique_together': {('entite', 'parc', 'date_rattachement')},
            },
        ),
        migrations.CreateModel(
            name='ChefParcParc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_nomination', models.DateField(default=django.utils.timezone.now, verbose_name='Date de nomination')),
                ('date_fin', models.DateField(blank=True, null=True, verbose_name='Date defin')),
                ('chef_parc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.chefparc', verbose_name='Chef de Parc')),
                ('parc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.parc', verbose_name='Parc')),
            ],
            options={
                'verbose_name': 'Affectation Chef de Parc',
                'verbose_name_plural': 'Affectations Chefs de Parc',
                'db_table': 'core_chef_parc_parc',
                'unique_together': {('chef_parc', 'parc', 'date_nomination')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='localite',
            unique_together={('nom', 'province')},
        ),
        migrations.AlterUniqueTogether(
            name='province',
            unique_together={('nom', 'region')},
        ),
        migrations.CreateModel(
            name='ResponsableParc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_debut', models.DateField(default=django.utils.timezone.now, verbose_name='Date de début')),
                ('date_fin', models.DateField(blank=True, null=True, verbose_name='Date de fin')),
                ('motif_fin', models.CharField(blank=True, max_length=100, null=True, verbose_name='Motif de fin')),
                ('parc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.parc', verbose_name='Parc')),
                ('responsable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.responsable', verbose_name='Responsable')),
            ],
            options={
                'verbose_name': 'Responsable de Parc',
                'verbose_name_plural': 'Responsables de Parcs',
                'db_table': 'core_responsable_parc',
                'unique_together': {('responsable', 'parc', 'date_debut')},
            },
        ),
        migrations.CreateModel(
            name='VehiculeParc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_affectation', models.DateField(default=django.utils.timezone.now, verbose_name="Date de début de l'affectation du véhicule au parc")),
                ('date_retrait', models.DateField(blank=True, null=True, verbose_name='Date de retrait')),
                ('est_actif', models.BooleanField(default=True, verbose_name='Affectation active')),
                ('parc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.parc', verbose_name='Parc')),
                ('vehicule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.vehicule', verbose_name='Véhicule')),
            ],
            options={
                'verbose_name': 'Rattachement Véhicule-Parc',
                'verbose_name_plural': 'Rattachements Véhicules-Parcs',
                'db_table': 'core_vehicule_parc',
                'unique_together': {('vehicule', 'parc', 'date_affectation')},
            },
        ),
    ]
